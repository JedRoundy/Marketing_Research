```{python}
import time
import openai
import pandas as pd

# Set sleep time and length per iteration
sleep_time = 5
length_per_iter = 50

# Include your OpenAI API key
api_key = "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"

# Vectors of incomes and prices
incomes = ["$50k", "$70k", "$120k"]
prices_int = [
    749, 799, 849, 874, 899, 924, 949, 974, 999,
    1024, 1049, 1074, 1099, 1124, 1149, 1199, 1249
]
prices_string = ["$" + str(price) for price in prices_int]

# Function for querying OpenAI API
def query(prompt, n):
    rvec = []
    if n <= 128:
        rvec = openai.Completion.create(
            engine="text-davinci-003",
            prompt=prompt,
            temperature=1,
            max_tokens=100,
            top_p=1.0,
            n=n,
            frequency_penalty=0.0,
            presence_penalty=0.0,
            stop=["\"\"\""]
        )
    else:
        nqueries = (n // 128) + 1
        if (n // 128) == (n / 128):
            nqueries = n // 128
        for i in range(1, nqueries + 1):
            if n > (i - 1) * 128:
                print("Waiting before/between queries...")
                time.sleep(sleep_time)
                n_for_request = 128
                if i == nqueries and n > (i - 1) * 128:
                    n_for_request = n - (i - 1) * 128
                rtemp = openai.Completion.create(
                    engine="text-davinci-003",
                    prompt=prompt,
                    temperature=1,
                    max_tokens=30,
                    top_p=1.0,
                    n=n_for_request,
                    frequency_penalty=0.0,
                    presence_penalty=0.0,
                    stop=["\"\"\""]
                )
                print(f"Query {i}/{nqueries} Done")
                rvec.append(rtemp)
    return rvec

# Function for extracting choices from responses
def get_choices(response_vec):
    choices = []
    if isinstance(response_vec, openai.Completion):
        nresponses = len(response_vec.choices)
        for i in range(nresponses):
            choices.append(response_vec.choices[i].text)
    else:
        for outer_i in range(len(response_vec)):
            nresponses = len(response_vec[outer_i].choices)
            for i in range(nresponses):
                choices.append(response_vec[outer_i].choices[i].text)
    return choices

# Function for generating prompts
def make_prompt_surface(income="$70k", surface_price="$999"):
    return prompt

# Main study
response_vec = []
price_vec = []
choices_vec = []
N = 300

# Create a list of price and income combinations
foo = [(price, income) for price in prices_string for income in incomes]
foo *= N // len_per_iter
foo = [(item[0], item[1]) for item in foo]

while len(foo) != 0:
    surface_prompt = make_prompt_surface(income=foo[0][1], surface_price=foo[0][0])
    responses = query(surface_prompt, length_per_iter)
    choices = get_choices(responses)
    df = pd.DataFrame({
        'income': [foo[0][1]] * len(choices),
        'price': [foo[0][0]] * len(choices),
        'choice': choices
    })
    df.to_csv('study_1a.csv', mode='a', header=False, index=False)
    print(f"price {foo[0][0]}, income {foo[0][1]} saved. {len(foo)} left.")
    foo.pop(0)
    time.sleep(sleep_time)
```